package com.jingfm.api.business;import java.util.HashMap;import java.util.List;import java.util.Map;import com.jingfm.api.ApiUrlDefine;import com.jingfm.api.ResultResponse;import com.jingfm.api.builder.FunctionResultBuilder;import com.jingfm.api.model.ListResult;import com.jingfm.api.model.MusicDTO;import com.jingfm.api.model.MusicInfoDTO;import com.jingfm.api.model.MusicRelatedDTO;import com.jingfm.api.model.UserFavMusicDTO;import com.jingfm.api.model.UserFrdDTO;import com.jingfm.api.model.UserHateMusicDTO;public class UserMusicRequestApi {		/**	 * 分页请求用户喜欢的歌曲列表 	 * @param params uid st ps ouid	 * ouid 请求ouid的喜欢歌曲列表	 * @return	 */	public static ResultResponse<ListResult<UserFavMusicDTO>> fetchFavMusics(Map<?, ?> params){		return FunctionResultBuilder.requestListResultResponse(				ApiUrlDefine.Normal.Music.Fetch_Music_Favorites, params, UserFavMusicDTO.class);		/*String jsonstring = CommonHttpApi.post(ApiUrlDefine.getApiUrl(ApiUrlDefine.Normal.Music.Fetch_Music_Favorites),params);		if(jsonstring != null){			try {				return FunctionResultBuilder.buildListResult(jsonstring,UserFavMusicDTO.class);			} catch (JSONException e) {				e.printStackTrace();			}		}		return CommonBuilder.buildResultError();*/	}			/**	 * 分页请求用户讨厌的歌曲列表 	 * @param params uid st ps	 * @return	 */	public static ResultResponse<ListResult<UserHateMusicDTO>> fetchHateMusics(Map<?, ?> params){		return FunctionResultBuilder.requestListResultResponse(				ApiUrlDefine.Normal.Music.Fetch_Music_Hates, params, UserHateMusicDTO.class);		/*String jsonstring = CommonHttpApi.post(ApiUrlDefine.getApiUrl(ApiUrlDefine.Normal.Music.Fetch_Music_Favorites),params);		if(jsonstring != null){			try {				return FunctionResultBuilder.buildListResult(jsonstring,UserHateMusicDTO.class);			} catch (JSONException e) {				e.printStackTrace();			}		}		return CommonBuilder.buildResultError();*/	}			/**	 * 获取歌曲的信息	 * @param params	 * @return	 */	public static ResultResponse<MusicInfoDTO> fetchTrackInfos(Map<?, ?> params){		return FunctionResultBuilder.fetch_trackinfo_post(				ApiUrlDefine.Normal.Music.Fetch_TrackInfos,params);	}		private static String[] relatedTypes = {"trckInfo","atstInfo","abmInfo","rltInfo"};	/**	 * 获取歌曲的周边信息	 * @param params tid type	 * type 歌曲trckInfo|艺人atstInfo|专辑abmInfo|rltInfo	 * @return	 */	public static ResultResponse<MusicRelatedDTO> fetchTrackRelatedInfos(Map<?, ?> params){		ResultResponse<MusicRelatedDTO> response = FunctionResultBuilder.requestResultResponse(				ApiUrlDefine.Normal.Music.Fetch_TrackRelatedInfos,params, MusicRelatedDTO.class);		if(response.isSuccess()){			response.getResult().setTid(Integer.class.cast(params.get("tid")));			for(String relatedtype:relatedTypes){				Object value = params.get(relatedtype);				if(value!= null){					response.getResult().setRealtedtype(String.valueOf(value));					break;				}			}		}		return response;		/*String jsonstring = CommonHttpApi.post(ApiUrlDefine.getApiUrl(ApiUrlDefine.Normal.Music.Fetch_TrackRelatedInfos),params);		if(jsonstring != null){			try {				ResultResponse<MusicRelatedDTO> result = FunctionResultBuilder.build(jsonstring,MusicRelatedDTO.class);				result.getResult().setTid(Integer.class.cast(params.get("tid")));				for(String relatedtype:relatedTypes){					Object value = params.get(relatedtype);					if(value!= null){						result.getResult().setRealtedtype(String.valueOf(value));						break;					}				}				return result;			} catch (JSONException e) {				e.printStackTrace();			}		}		return CommonBuilder.buildResultError();*/	}		/**	 * 听过歌曲动作触发，播放歌曲到时长一半触发此动作	 * @param params uid tid	 * @return	 */	public static ResultResponse<String> musicHeardAct(Map<?, ?> params){		return FunctionResultBuilder.requestSimpleData(				ApiUrlDefine.Normal.Music.Post_HeardMusic,params,String.class);	}		/**	 * 听过歌曲到一半时长时动作触发	 * @param params uid tid next half	 * next true 10s后next操作 false 10s前next操作	 * half 是否到听到一半后next操作	 * @return	 */	public static ResultResponse<String> musicHalfHeardAct(Map<?, ?> params){		return FunctionResultBuilder.requestSimpleData(				ApiUrlDefine.Normal.Music.Post_HalfHeardMusic,params,String.class);	}			/**	 * 听过歌曲到一半时长时动作触发	 * @param params uid tid next half	 * next: 是否超过10s	 * half: 是否超过一半	 * @return	 */	public static ResultResponse<String> musicSkipNextAct(Map<?, ?> params){		return FunctionResultBuilder.requestSimpleData(ApiUrlDefine.Normal.Music.Post_NextMusic,params,String.class);	}		/**	 * 喜欢歌曲动作触发	 * @param params uid tid cmbt moodTagIds c ouid	 * cmbt 当前播放序列的搜索条件	 * moodTagIds 当前播放序列的搜索条件包含的心情的tagid	 * c 本次搜索搜索序列中第几次喜欢歌曲， 参数不传=0	 * ouid 谁喜欢的此首歌曲 限于ticker中看见别人喜欢的歌曲 点喜欢后 ouid=别人的id	 * @return 可能会存在播放序列	 */	public static ResultResponse<ListResult<MusicDTO>> musicLoveAct(Map<?, ?> params){		return FunctionResultBuilder.requestListResultResponse(				ApiUrlDefine.Normal.Music.Post_LoveMusic, params, MusicDTO.class);		//return FunctionResultBuilder.pls_post(ApiUrlDefine.Normal.Music.Post_LoveMusic, params);	}		/**	 * 喜欢歌曲动作触发	 * @param params uid tid cmbt c	 * cmbt 当前播放序列的搜索条件	 * c 本次搜索搜索序列中第几次讨厌歌曲， 参数不传=0	 * @return 可能会存在播放序列	 */	public static ResultResponse<ListResult<MusicDTO>> musicHateAct(Map<?, ?> params){		return FunctionResultBuilder.requestListResultResponse(				ApiUrlDefine.Normal.Music.Post_HateMusic, params, MusicDTO.class);		//return FunctionResultBuilder.pls_post(ApiUrlDefine.Normal.Music.Post_HateMusic, params);	}		/**	 * 请求多个歌曲是否喜欢	 * @param params	 * @return 返回喜欢的歌曲的tid	 */	public static ResultResponse<List<Integer>> fetchValidateFavorites(Map<?, ?> params){		return FunctionResultBuilder.requestSimpleListResultResponse(				ApiUrlDefine.Normal.Music.Fetch_Validate_Favorites, params, Integer.class);	}			/**	 * 请求歌曲被那些好友喜欢	 * @param params uid tid	 * @return 	 */	public static ResultResponse<ListResult<UserFrdDTO>> fetchMusicFrdlvd(Map<?, ?> params){		ResultResponse<ListResult<UserFrdDTO>> response =  FunctionResultBuilder.requestListResultResponse(				ApiUrlDefine.Normal.Music.Fetch_Music_Frdlvd, params, UserFrdDTO.class);				if(response.isSuccess()){			List<UserFrdDTO> items = response.getResult().getItems();			if(!items.isEmpty()){				StringBuilder sbuids = new StringBuilder();				for(int i=0;i<items.size();i++){					if(i ==0) sbuids.append(items.get(i).getUid());					else sbuids.append(',').append(items.get(i).getUid());				}								Map<Object, Object> params_pt = new HashMap<Object, Object>(); 				params_pt.put("uid", params.get("uid"));				params_pt.put("uids", sbuids.toString());				ResultResponse<List<String>> response_pt = UserRequestApi.fetchUsersPlaytime(params_pt);				List<String> pts = response_pt.getResult();				if (pts != null && items.size() == pts.size()) {					for(int i=0;i<items.size();i++){						items.get(i).setPt(pts.get(i));						//if(i ==0) sbuids.append(items.get(0).getUid());						//else sbuids.append(',').append(items.get(0).getUid());					}				}			}		}				return response;	}	}