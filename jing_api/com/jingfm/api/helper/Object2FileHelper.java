package com.jingfm.api.helper;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import android.content.Context;import android.os.Environment;public class Object2FileHelper {	private static class Holder{ 		private static Object2FileHelper instance =new Object2FileHelper(); 	}	/**	 * 获取工厂单例	 * @return	 */	public static Object2FileHelper getInstance() { 		return Holder.instance; 	}		private Object2FileHelper(){	}		/**	 * 文件处理工具类	 * 	 * @author ShawnXiao	 * 	 */	private Context mContext;	public void setContext(Context context) {		mContext = context;	}	/**	 * 检查是否有SD卡，并有读写权限	 * 	 * @return	 */	public static final boolean checkSDCard() {		boolean result = false;		String state = Environment.getExternalStorageState();		if (state.toLowerCase().equals(Environment.MEDIA_MOUNTED.toLowerCase())) {			result = true;		}		return result;	}	/**	 * 创建一个手机文件	 * 	 * @param filename	 * @return	 */	public File createFile(String filename) {		File file = null;		try {			if (checkSDCard()) {				File rootDir = Environment.getExternalStorageDirectory();				String rootPath = rootDir.getAbsolutePath();				file = new File(rootPath + "/SOP/" + filename);			}		} catch (Exception e) {		}		return file;	}	/**	 * 创建一个手机文件	 * 	 * @param filename	 *            文件名	 * @return 布尔值	 */	public boolean isFileExist(String filename) {		File file = null;		try {			if (checkSDCard()) {				File rootDir = Environment.getExternalStorageDirectory();				String rootPath = rootDir.getAbsolutePath();				file = new File(rootPath + "/SOP/" + filename);				// if (D2EConfigures.TEST) {				// Log.e("fileExist----------->", file.exists() ? "存在" : "不存在");				// }				if (file.exists()) {					return true;				}			}		} catch (Exception e) {		}		return false;	}	/**	 * 删除一个文件	 * 	 * @param filename	 *            文件名	 */	public void deletExistFile(String filename) {		File file = null;		try {			if (checkSDCard()) {				File rootDir = Environment.getExternalStorageDirectory();				String rootPath = rootDir.getAbsolutePath();				file = new File(rootPath + "/SOP/" + filename);				if (file.exists()) {					file.delete();					// boolean isSuccess = file.delete();					// if (D2EConfigures.TEST) {					// Log.e("删除文件是否成功：", isSuccess ? "是" : "否");					// }				}			}		} catch (Exception e) {		}	}	public static byte[] generateByte(InputStream inStream) throws IOException {		ByteArrayOutputStream swapStream = new ByteArrayOutputStream();		byte[] buff = new byte[100]; // buff用于存放循环读取的临时数据		int rc = 0;		while ((rc = inStream.read(buff, 0, 100)) > 0) {			swapStream.write(buff, 0, rc);		}		return swapStream.toByteArray();	}	/**	 * 读取文件中的数据	 * 	 * @param filename	 *            文件名	 * @return 字节数组数据	 */	public final byte[] readFile(String filename) {		FileInputStream fis = null;		byte[] bytes = null;		try {			if (checkSDCard()) {				File rootDir = Environment.getExternalStorageDirectory();				String rootPath = rootDir.getAbsolutePath();				File file = new File(rootPath + "/SOP/" + filename);				fis = new FileInputStream(file);				bytes = generateByte(fis);// JJNetHelper.readByByte(fis, -1);			} else {				fis = mContext.openFileInput(filename);				bytes = generateByte(fis);// JJNetHelper.readByByte(fis, -1);			}		} catch (Exception e) {			bytes = null;		} finally {			try {				if (fis != null) {					fis.close();					fis = null;				}			} catch (Exception e) {			}		}		return bytes;	}	/**	 * 保存文件	 * 	 * @param filename	 *            要保存数据为文件的文件名	 * @param data	 *            要保存的字节数组数据	 */	public final void saveFile(String filename, byte[] data) {		FileOutputStream fos = null;		try {			if (checkSDCard()) {				File rootDir = Environment.getExternalStorageDirectory();				String rootPath = rootDir.getAbsolutePath();				File file = new File(rootPath + "/SOP");				if (!file.exists()) {					file.mkdir();				}				File png = new File(file.getPath() + "/" + filename);				if (png.exists()) {					png.delete();				}				fos = new FileOutputStream(png, true);				fos.write(data);				fos.close();			} else {				fos = mContext.openFileOutput(filename, Context.MODE_PRIVATE);				fos.write(data);				fos.close();			}		} catch (Exception e) {			e.printStackTrace();		} finally {			if (fos != null) {				try {					fos.close();					fos = null;				} catch (Exception e) {				}			}		}	}	/**	 * 将对象数据序列化为文件	 * 	 * @param filename	 *            要序列化为文件的文件名	 * @param data	 *            对象数据	 */	public final void serialObject(String filename, Object data) {		// if (D2EConfigures.TEST) {		// Log.e("data----------->", "" + data);		// } 		FileOutputStream fos = null;		ObjectOutputStream oos = null;		try {			if (checkSDCard()) {				File rootDir = Environment.getExternalStorageDirectory();				String rootPath = rootDir.getAbsolutePath();				File file = new File(rootPath + "/SOP");				if (!file.exists()) {					file.mkdir();				}				File png = new File(file.getPath() + "/" + filename);				if (png.exists()) {					png.delete();				}				fos = new FileOutputStream(png, true);				oos = new ObjectOutputStream(fos);				oos.writeObject(data);				// if (D2EConfigures.TEST) {				// Log.e("xxxxxxxxxxx", "" + (oos.toString()));				// }				oos.close();				fos.close();			} else {				fos = mContext.openFileOutput(filename, Context.MODE_APPEND);				oos = new ObjectOutputStream(fos);				oos.writeObject(data);				// if (D2EConfigures.TEST) {				// Log.e("xxxxxxxxxxx", "" + (oos.toString()));				// }				oos.close();				fos.close();			}		} catch (Exception e) {			e.printStackTrace();		} finally {			if (fos != null || oos != null) {				try {					oos.close();					oos = null;					fos.close();					fos = null;				} catch (Exception e) {				}			}		}	}	/**	 * 反序列化文件为对象	 * 	 * @param filename	 *            保存的文件名	 * @return 对象数据	 */	public final Object deSerialObject(String filename) {		FileInputStream fis = null;		ObjectInputStream ois = null;		Object data = null;		try {			if (checkSDCard()) {				File rootDir = Environment.getExternalStorageDirectory();				String rootPath = rootDir.getAbsolutePath();				File file = new File(rootPath + "/SOP/" + filename);				fis = new FileInputStream(file);				ois = new ObjectInputStream(fis);				data = ois.readObject();				ois.close();				fis.close();			} else {				fis = mContext.openFileInput(filename);				ois = new ObjectInputStream(fis);				data = ois.readObject();				ois.close();				fis.close();			}		} catch (Exception e) {			data = null;		} finally {			try {				if (fis != null || ois != null) {					ois.close();					ois = null;					fis.close();					fis = null;				}			} catch (Exception e) {			}		}		return data;	}}