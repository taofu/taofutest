<!-- keytool -genkey -alias jing.keystore -keyalg RSA -validity 400000 -keystore jing.keystore -->
<project
    name="Jing"
    default="deploy" >

    <!-- 版本 -->
    <property
        name="version"
        value="1.5.0" />
   
   <!--  每次升级加1 -->
    <property
        name="versioncode"
        value="10" />
    
      <!-- 渠道名:渠道号 #中文注释 -->
      <!-- 	
					91助手: anrd_91
					安智市场: anrd_anzhi
					应用汇: anrd_yyh
					移动MM: anrd_ydmm
					天翼商城: anrd_ty
					联通: anrd_wo
					开奇商店: anrd_kqsd
					安丰商店: anrd_af
					木蚂蚁: anrd_mmy
					优亿市场: anrd_yysc
					安卓星空: anrd_azxk
					十字猫: anrd_szm
					机锋: anrd_jf
					历趣市场: anrd_lqsc
					安极市场: anrd_ajsc
					网易应用: anrd_wyh
					安卓市场: anrd_az
					N多网: anrd_ndsc
					百度手机助手: anrd_bd
					GOOGLE PLAY: anrd_gp
					360手机助手: anrd_360
					豌豆荚: anrd_wdj
					3G安卓市场: anrd_3g
					腾讯: anrd_tx
					当乐: anrd_dldg
					安软园: anrd_ary
					飞鹏网: anrd_fpw
					搜狐软件: anrd_sohu
					魔头网: anrd_sohu
					应用搜: anrd_yys
					中关村在线: anrd_zol
					安卓在线: anrd_azzx
					新浪应用: anrd_sina
					酷安网: anrd_kaw
					宝软: anrd_br
					搜狗市场: anrd_sg
					苏宁应用商店: anrd_sn
					华为: anrd_hw
					三星: anrd_ss
					海信: anrd_hx
					oppo: anrd_oppo
					金立易用汇: anrd_jl
					魅族: anrd_mz
					联想乐商店: anrd_lsd
					酷派: anrd_cp
					中兴: anrd_zx
					小米应用市场: anrd_xm
					飞流: anrd_fl
			-->
    <property
        name="channellist"
        value="
				anrd_91:anrd_91,
				anrd_anzhi:anrd_anzhi,
				anrd_yyh:anrd_yyh,
				anrd_ydmm:anrd_ydmm,
				anrd_ty:anrd_ty,
				anrd_wo:anrd_wo,
				anrd_kqsd:anrd_kqsd,
				anrd_af:anrd_af,
				anrd_mmy:anrd_mmy,
				anrd_yysc:anrd_yysc,
				anrd_azxk:anrd_azxk,
				anrd_szm:anrd_szm,
				anrd_jf:anrd_jf,
				anrd_lqsc:anrd_lqsc,
				anrd_ajsc:anrd_ajsc,
				anrd_wyh:anrd_wyh,
				anrd_az:anrd_az,
				anrd_ndsc:anrd_ndsc,
				anrd_bd:anrd_bd,
				anrd_gp:anrd_gp,
				anrd_360:anrd_360,
				anrd_wdj:anrd_wdj,
				anrd_3g:anrd_3g,
				anrd_tx:anrd_tx,
				anrd_dldg:anrd_dldg,
				anrd_ary:anrd_ary,
				anrd_fpw:anrd_fpw,
				anrd_sohu:anrd_sohu,
				anrd_sohu:anrd_sohu,
				anrd_yys:anrd_yys,
				anrd_zol:anrd_zol,
				anrd_azzx:anrd_azzx,
				anrd_sina:anrd_sina,
				anrd_kaw:anrd_kaw,
				anrd_br:anrd_br,
				anrd_sg:anrd_sg,
				anrd_sn:anrd_sn,
				anrd_hw:anrd_hw,
				anrd_ss:anrd_ss,
				anrd_hx:anrd_hx,
				anrd_oppo:anrd_oppo,
				anrd_jl:anrd_jl,
				anrd_mz:anrd_mz,
				anrd_lsd:anrd_lsd,
				anrd_cp:anrd_cp,
				anrd_zx:anrd_zx,
				anrd_xm:anrd_xm,
				anrd_fl:anrd_fl" />
    
    <!-- ANT环境变量 -->
    <property environment="env" />

    <!-- 使用第三方的ant包，使ant支持for循环 -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties" >
        <classpath>
            <pathelement location="ant-lib/ant-contrib-1.0b3.jar" />
        </classpath>
    </taskdef>
    
    <!-- 应用名称 -->
    <property
        name="appName"
        value="${ant.project.name}" />
    
    <!-- SDK目录(获取操作系统环境变量ANDROID_SDK_HOME的值) -->
<!--     <property
        name="sdk-folder"
        value="$ANDROID_SDK_HOME" /> -->
    <property
        name="sdk-folder"
        value="${env.ANDROID_SDK_HOME}" />
    
    <!-- SDK指定平台目录 -->
    <property
        name="sdk-platform-folder"
        value="${sdk-folder}/platforms/android-14" />
    
    <!-- SDK中tools目录 -->
    <property
        name="sdk-tools"
        value="${sdk-folder}/tools" />
    
    <!-- SDK指定平台中tools目录 -->
    <property
        name="sdk-platform-tools"
        value="${sdk-folder}/platform-tools" />

    <!-- 使用到的命令(当前系统为windows,如果系统为linux,可将.bat文件替换成相对应的命令) -->
    <property
        name="aapt"
        value="aapt" />
    <property
        name="aidl"
        value="aidl" />
    <property
        name="dx"
        value="dx" />
    <property
        name="apkbuilder"
        value="apkbuilder" />
    <property
        name="jarsigner"
        value="jarsigner" />
    <property
        name="zipalign"
        value="zipalign" />

    <!-- 编译需要的jar; 如果项目使用到地图服务则需要maps.jar -->
    <property
        name="android-jar"
        value="${sdk-platform-folder}/android.jar" /> 
    <property
        name="native.libs.absolute.dir"
        location="libs" />

    <!--  -->

    <property
        name="channelname"
        value="" />

    <property
        name="channelkey"
        value="" />

    <!-- 编译aidl文件所需的预处理框架文件framework.aidl -->

    <property
        name="framework-aidl"
        value="${sdk-platform-folder}/framework.aidl" />

    <!-- 清单文件 -->

    <property
        name="manifest-xml"
        value="AndroidManifest.xml" />
    <!-- 源文件目录 -->

    <property
        name="resource-dir"
        value="res" />

    <property
        name="asset-dir"
        value="assets" />
    <!-- java源文件目录 -->

    <property
        name="srcdir"
        value="src" />

    <property
        name="srcdir-ospath"
        value="${basedir}/${srcdir}" />
    <!-- 外部类库所在目录 -->

    <property
        name="external-lib"
        value="libs" />

    <property
        name="external-lib-ospath"
        value="${basedir}/${external-lib}" />

    <property
        name="external-lib-ospath_so"
        value="${basedir}/${external-lib}/armeabi" />

    <!-- <property
        name="configFile"
        value="test" /> -->
    <!-- !!!!!!!!!!!!!!!!!! -->


    <!-- 循环打包 -->
    <target name="deploy" >
        <echo>
			循环打包....
        </echo>
        <foreach
            delimiter=","
            list="${channellist}"
            param="nameandchannel"
            target="modify_manifest" >
        </foreach>
    </target>

    <target name="modify_manifest" >

        <!-- 获取渠道名字 -->
        <propertyregex
            input="${nameandchannel}"
            override="true"
            property="channelname"
            regexp="(\w+):"
            select="\1" />
        <echo>
			获取渠道名字: ${channelname}
        </echo>
        <!-- 获取渠道号码 -->
        <propertyregex
            input="${nameandchannel}"
            override="true"
            property="channelkey"
            regexp=":(\w+)"
            select="\1" />
        <!-- 正则匹配替换渠道号 -->
        <!-- (.*)为正则匹配任意文本 -->
        <!-- \1是一个反向引用 </channelID> -->
        
		<echo>
			获取渠道号码: ${channelkey}
        </echo>

        
		<!-- 修改Manifest -->
        <replaceregexp byline="false" encoding="UTF-8" flags="g" >
            <regexp pattern="android:debuggable=&quot;(.*)&quot;" />  
   			<substitution expression="android:debuggable=&quot;false&quot;" />  
            <fileset dir="" includes="AndroidManifest.xml" />
        </replaceregexp>
        <replaceregexp byline="false" encoding="UTF-8" flags="g" >
            <regexp pattern="android:value=&quot;(.*)&quot; android:name=&quot;TD_CHANNEL_ID&quot;" />  
   			<substitution expression="android:value=&quot;${channelkey}&quot; android:name=&quot;TD_CHANNEL_ID&quot;" />  
            <fileset dir="" includes="AndroidManifest.xml" />
        </replaceregexp>
        <replaceregexp byline="false" encoding="UTF-8" flags="g" >
            <regexp pattern="android:versionCode=&quot;(.*)&quot; android:versionName=&quot;(.*)&quot;" />
            <!-- 换包名，versionname ,versioncode -->
            <substitution expression="android:versionCode=&quot;${versioncode}&quot; android:versionName=&quot;${version}&quot;" />
            <fileset dir="" includes="AndroidManifest.xml" />
        </replaceregexp>

        <!-- 修改cannelID 还有configFile -->

        <!-- <replace
            dir="${basedir}/res/raw"
            includes="**/*.xml"
            token="channelId>8888"
            value="channelId>${channelkey}" /> -->

       <!--  <replace
            dir="${basedir}/res/raw"
            includes="**/*.xml"
            token="configFile>test"
            value="configFile>${configFile}" /> -->

        <antcall target="CAOrelease" />
<!-- 
        <antcall target="init" /> -->
    </target>

    <!-- 根据工程中的资源文件生成R.java文件 -->

<!-- 初始化工作 -->

    <target name="init">

        <echo>
			Directories initialization...
        </echo>
        <!-- 生成R文件的相对目录 -->

        <var
            name="outdir-gen"
            value="gen" />
        <!-- 编译后的文件放置目录 -->

        <var
            name="outdir-bin"
            value="releases/${version}/${channelname}" />
        <!-- 生成class目录 -->

        <var
            name="outdir-classes"
            value="${outdir-bin}" />

        <var
            name="outdir-classes-ospath"
            value="${basedir}/${outdir-classes}" />

        <!-- classes.dex相关变量 -->

        <var
            name="dex-file"
            value="classes.dex" />

        <var
            name="dex-path"
            value="${outdir-bin}/${dex-file}" />

        <var
            name="dex-ospath"
            value="${basedir}/${dex-path}" />

        <!-- 经过aapt生成的资源包文件 -->

        <var
            name="asset-package"
            value="${outdir-bin}/jar-asset" />
        <var
            name="resources-package"
            value="${outdir-bin}/resources.ap_" />

        <var
            name="resources-package-ospath"
            value="${basedir}/${resources-package}" />

        <var
            name="libs-package"
            value="${outdir-bin}/libs" />

        <!-- 未认证apk包 -->

        <var
            name="out-unsigned-package"
            value="${outdir-bin}/${appName}-unsigned.apk" />

        <var
            name="out-unsigned-package-ospath"
            value="${basedir}/${out-unsigned-package}" />

        <!-- 证书文件 -->

        <var
            name="keystore-file"
            value="${basedir}/jing.keystore" />

        <!-- 已认证apk包 -->

        <var
            name="out-signed-package"
            value="${outdir-bin}/${appName}_${channelname}_v${version}" />

        <var
            name="out-signed-package-ospath"
            value="${basedir}/${out-signed-package}" />

        <delete dir="${outdir-bin}" />
        
        <mkdir dir="${outdir-gen}" />
        <mkdir dir="${outdir-bin}" />

        <mkdir dir="${outdir-classes}" />
    </target>

    <target
        name="gen-R"
        depends="init" >

        <echo>
			Genrate `R.java` file....
        </echo>

        <exec
            executable="${aapt}"
            failonerror="true" >

            <arg value="package" />

            <arg value="-f" />

            <arg value="-m" />

            <arg value="-J" />

            <arg value="${outdir-gen}" />

            <arg value="-S" />

            <arg value="${resource-dir}" />

            <arg value="-M" />

            <arg value="${manifest-xml}" />

            <arg value="-I" />

            <arg value="${android-jar}" />
        </exec>
    </target>

    <!-- 编译aidl文件 -->

    <target
        name="aidl"
        depends="gen-R" >

        <echo>
					Compile aidl....
        </echo>

        <apply
            executable="${aidl}"
            failonerror="true" >

            <!-- 指定预处理文件 -->

            <arg value="-p${framework-aidl}" />
            <!-- aidl声明的目录 -->

            <arg value="-I${srcdir}" />
            <!-- 目标文件目录 -->

            <arg value="-o${outdir-gen}" />
            <!-- 指定哪些文件需要编译 -->

            <fileset dir="${srcdir}" >

                <include name="**/*.aidl" />
            </fileset>
        </apply>
    </target>

    <!-- 将工程中的java源文件编译成class文件 -->

    <target
        name="compile"
        depends="aidl" >

        <echo>
					Compile Java source code to class by utf-8
        </echo>

        <javac
            bootclasspath="${android-jar}"
            destdir="${outdir-classes}"
            encoding="utf-8"
            srcdir="."
            includeantruntime="no"
            target="1.6"
            verbose="false" >

            <compilerarg line="-encoding UTF-8" />

            <classpath>

                <fileset
                    dir="${external-lib}"
                    includes="*.jar" />
            </classpath>
        </javac>
    </target>

    <!-- 将.class文件转化成.dex文件 -->

    <target
        name="dex"
        depends="compile" >

        <echo>
					Convert .class to .dex....
        </echo>

        <exec
            executable="${dx}"
            failonerror="true" >

            <arg value="--dex" />
            <!-- 输出文件 -->

            <arg value="--output=${dex-ospath}" />
            <!-- 要生成.dex文件的源classes和libraries -->

            <arg value="${outdir-classes-ospath}" />

            <arg value="${external-lib-ospath}" />
        </exec>
    </target>

    <!-- 将资源文件放进输出目录 -->

    <target name="package-res-and-assets" >

        <echo>
					Put resources file to destination...
        </echo>

        <exec
            executable="${aapt}"
            failonerror="true" >

            <arg value="package" />

            <arg value="-f" />

            <arg value="-M" />

            <arg value="${manifest-xml}" />

            <arg value="-S" />

            <arg value="${resource-dir}" />

            <arg value="-A" />

            <arg value="${asset-dir}" />
            
<!--             <arg value="-A" />

            <arg value="${asset-package}" /> -->

            <arg value="-I" />

            <arg value="${android-jar}" />

            <arg value="-F" />

            <arg value="${resources-package}" />
        </exec>
    </target>

    <!-- 打包成未签证的apk -->

    <target
        name="package"
        depends="dex, package-res-and-assets" >

        <echo>
					Package to .apk ...
        </echo>

        <exec
            executable="${apkbuilder}"
            failonerror="true" >

            <arg value="${out-unsigned-package-ospath}" />

            <arg value="-u" />

            <arg value="-z" />

            <arg value="${resources-package-ospath}" />

            <arg value="-f" />

            <arg value="${dex-ospath}" />

            <arg value="-rf" />

            <arg value="${srcdir-ospath}" />

            <arg value="-nf" />

            <arg value="${external-lib-ospath}" />
            
            <!-- -rj  ${libraries.dir}   -->
            <arg value="-rj" />
            
            <arg value="${native.libs.absolute.dir}" />
            
        </exec>
    </target>

    <!-- 对apk进行签证 -->

    <target
        name="jarsigner"
        depends="package" >

        <echo>
					Packaging signed apk for release...
        </echo>

        <exec
            executable="${jarsigner}"
            failonerror="true" >

            <arg line="-verbose -digestalg SHA1 -sigalg MD5withRSA" />

            <arg value="-keystore" />

            <arg value="${keystore-file}" />

            <arg value="-storepass" />

            <arg value="123456" />

            <arg value="-keypass" />

            <arg value="123456" />

            <arg value="-signedjar" />

            <arg value="${out-signed-package-ospath}" />

            <arg value="${out-unsigned-package-ospath}" />
            <!-- 不要忘了证书的别名 -->

            <arg value="jing.keystore" />
        </exec>
    </target>

    <!-- 发布 -->

    <target
        name="release"
        depends="jarsigner" >

        <!-- 删除未签证apk -->

        <delete file="${out-unsigned-package-ospath}" />

        <!-- 删除其他文件 -->

        <delete file="${resources-package}" />

        <delete file="${dex-path}" />

        <echo>
					APK is released. path:${out-signed-package-ospath}
        </echo>
    </target>

    <target
        name="zipalign"
        depends="release" >

        <exec
            executable="${zipalign}"
            failonerror="true" >

            <arg value="-v" />

            <arg value="4" />

            <arg value="${out-signed-package-ospath}" />

            <arg value="${out-signed-package-ospath}.apk" />
        </exec>
    </target>

    <!-- 整理目录 -->

    <target
        name="CAOrelease"
        depends="zipalign" >

        <!-- 删除没优化apk -->

        <delete file="${out-signed-package-ospath}" />

        <!-- 删除其他文件 -->

        <delete dir="${outdir-bin}/org" />

        <delete dir="${outdir-bin}/com" />
        <!-- 修改cannelID -->

      <!--   <replace
            dir="${basedir}/res/raw"
            includes="**/*.xml"
            token="channelId>${channelkey}"
            value="channelId>8888" />

        <replace
            dir="${basedir}/res/raw"
            includes="**/*.xml"
            token="configFile>${configFile}"
            value="configFile>test" /> -->

        <echo>
			CAO Clean
        </echo>
    </target>

</project>
